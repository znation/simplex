(let <= (lambda x y
  (cond (= x y) true
        (< x y) true
        true false)))

(let >= (lambda x y
  (cond (= x y) true
        (> x y) true
        true false)))

(let append (lambda ls1 ls2
  (cond (= nil ls1) ls2
        (= nil (car ls1)) ls2
        (= nil ls2) ls1
        (= nil (car ls2)) ls1
        true (cons (car ls1) (append (cdr ls1) ls2)))))

(let len (lambda xs
  (cond (= (car xs) nil) 0
        (= (cdr xs) nil) 1
        true (+ 1 (len (cdr xs))))))

(let map
  (lambda fn xs
    (cond (= xs nil) nil
          true (cons (fn (car xs)) (map fn (cdr xs))))))

(let reverse (lambda xs
    (debugPrint
      (if (<= (len xs) 1)
          xs
          (append (reverse (cdr xs)) (list (car xs)))))))

(let debugPrint
  (lambda x
    (sequence
      (print '
---DEBUG------------------------------------------------------------------------
' x '
---END DEBUG--------------------------------------------------------------------
')
      x)))
