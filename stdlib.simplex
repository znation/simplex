(let <= (lambda x y
  (cond (= x y) true
        (< x y) true
        true false)))

(let >= (lambda x y
  (cond (= x y) true
        (> x y) true
        true false)))

(let append (lambda ls1 ls2
  (cond (= nil ls1) ls2
        (= nil (car ls1)) ls2
        (= nil ls2) ls1
        (= nil (car ls2)) ls1
        true (cons (car ls1) (append (cdr ls1) ls2)))))

(let len (lambda xs
  (cond (= (car xs) nil) 0
        (= (cdr xs) nil) 1
        true (+ 1 (len (cdr xs))))))

(let map
  (lambda fn xs
    (cond (= xs nil) nil
          true (cons (fn (car xs)) (map fn (cdr xs))))))

(let readLine (lambda
  (sequence
    (let readLine' (lambda acc
      (sequence
        (let next (read))
        (cond (= next nil) acc
              (= next (car endl)) acc
              (= (car acc) nil) (readLine' (cons next nil))
              (= (cdr acc) nil) (readLine' (list next (car acc)))
              true (readLine' (cons next acc))))))
    (reverse (readLine' '')))))

(let reverse (lambda xs
  (if (<= (len xs) 1)
      xs
      (append (reverse (cdr xs)) (list (car xs))))))
